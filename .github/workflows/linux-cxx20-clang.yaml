name: linux-cxx20

on: [ push ]

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  linux-clang:
    env: 
        CC: clang
        CXX: clang++
    strategy:
      fail-fast: false
      matrix:
        include:
          - compiler: llvm
            compiler-version: 18
          - compiler: llvm
            compiler-version: 19
          - compiler: llvm
            compiler-version: 20
    name: "${{ github.job }} (${{ matrix.compiler }}-${{ matrix.compiler-version }})"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.compiler-version }}
          platform: x64
          script: |
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: "${{ github.job }}-${{ matrix.compiler }}-${{ matrix.compiler-version }}"
          max-size: "2G"
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build ${{ matrix.additional-dep }}
      - name: Install Conan
        run: |
          sudo apt install -y pipx
          pipx install conan
          conan profile detect
      - name: Make sure the library compiles with Conan
        run: conan build . --build=missing -s compiler.cppstd=gnu20 -o *:with_capnproto=True -o *:with_cbor=True -o *:with_flatbuffers=True -o *:with_msgpack=True -o *:with_toml=True -o *:with_ubjson=True -o *:with_xml=True -o *:with_yaml=True      
      - name: Compile
        run: |
          sudo ln -s $(which ccache) /usr/local/bin/$CC
          sudo ln -s $(which ccache) /usr/local/bin/$CXX
          $CXX --version
          cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DREFLECTCPP_BUILD_TESTS=ON -DREFLECTCPP_BUILD_BENCHMARKS=ON -DREFLECTCPP_BSON=ON -DREFLECTCPP_CAPNPROTO=ON -DREFLECTCPP_CBOR=ON -DREFLECTCPP_FLEXBUFFERS=ON -DREFLECTCPP_MSGPACK=ON -DREFLECTCPP_TOML=ON -DREFLECTCPP_XML=ON -DREFLECTCPP_YAML=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
          cmake --build build
      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure
      - name: Run benchmarks
        run: |
          echo '# Benchmarks' >> $GITHUB_STEP_SUMMARY 
          echo '## Benchmarks across different formats' >> $GITHUB_STEP_SUMMARY 
          echo '```' >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=canada_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=canada_write >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=licenses_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=licenses_write >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=person_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=person_write >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '## Benchmarks for JSON' >> $GITHUB_STEP_SUMMARY 
          echo '```' >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/json/reflect-cpp-json-benchmarks --benchmark_filter=person_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/json/reflect-cpp-json-benchmarks --benchmark_filter=canada >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/json/reflect-cpp-json-benchmarks --benchmark_filter=licenses >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
