name: macos

on: [ push, pull_request ]

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  macos-clang:
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "macos-13"]
        format: ["JSON", "AVRO", "CAPNPROTO", "CBOR", "FLEXBUFFERS", "MSGPACK", "XML", "TOML", "UBJSON", "YAML"]
    name: "${{ matrix.os }} (${{ matrix.format }})"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Install ninja 
        run: brew install ninja
        if: matrix.os == 'macos-latest'
      - name: Compile
        env:
          CC: clang
          CXX: clang++
        run: |
          if [[ "${{ matrix.os == 'macos-latest' }}" == "true" ]]; then
            export VCPKG_FORCE_SYSTEM_BINARIES=arm
            export CMAKE_GENERATOR=Ninja
          fi
          $CXX --version
          if [[ "${{ matrix.format == 'JSON' }}" == "true" ]]; then
            cmake -S . -B build -DCMAKE_CXX_STANDARD=20 -DREFLECTCPP_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          else
            cmake -S . -B build -DCMAKE_CXX_STANDARD=20 -DREFLECTCPP_BUILD_TESTS=ON -DREFLECTCPP_JSON=OFF -DREFLECTCPP_${{ matrix.format }}=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          fi
          cmake --build build -j 4
      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure
