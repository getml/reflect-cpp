name: linux

on: [ push, pull_request ]

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        format: ["JSON", "AVRO", "CAPNPROTO", "CBOR", "FLEXBUFFERS", "MSGPACK", "XML", "TOML", "UBJSON", "YAML"]
        include:
          - compiler: llvm
            compiler-version: 16
            cxx: 20
            package-manager: vcpkg
          - compiler: llvm
            compiler-version: 17
            cxx: 20 
            package-manager: vcpkg
          - compiler: llvm
            compiler-version: 18
            cxx: 20  
            package-manager: vcpkg
          - compiler: gcc
            compiler-version: 11
            cxx: 20  
            package-manager: vcpkg
          - compiler: gcc
            compiler-version: 12
            cxx: 20  
            package-manager: vcpkg
          - compiler: gcc
            compiler-version: 13
            cxx: 20  
            package-manager: vcpkg
          - compiler: gcc
            compiler-version: 14
            cxx: 20  
            package-manager: vcpkg
          - compiler: gcc
            compiler-version: 13
            cxx: 23 
            package-manager: vcpkg
          - compiler: gcc
            compiler-version: 14
            cxx: 23  
            package-manager: vcpkg
          - compiler: llvm
            compiler-version: 18
            cxx: 20  
            package-manager: conan 
            format: "JSON"
          - compiler: gcc
            compiler-version: 14
            cxx: 20  
            package-manager: conan 
            format: "JSON"
          - compiler: gcc
            compiler-version: 14
            cxx: 23  
            package-manager: conan 
            format: "JSON"
    name: "${{ github.job }} (${{ matrix.format }}-C++${{ matrix.cxx }}-${{ matrix.compiler }}-${{ matrix.compiler-version }}-${{ matrix.package-manager }})"
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Run vcpkg
        if: matrix.package-manager != 'conan'
        uses: lukka/run-vcpkg@v11
      - name: Install dependencies
        run: |
          sudo apt update
          if [[ "${{ matrix.compiler-version }}" == 11 ]]; then
            sudo apt install -y ninja-build g++-11 
          else
            sudo apt install -y ninja-build
          fi
      - name: Install Conan
        if: matrix.package-manager == 'conan'
        run: |
          sudo apt install -y pipx
          pipx install conan
          conan profile detect
      - name: Make sure the library compiles with Conan
        if: matrix.package-manager == 'conan'
        run: conan build . --build=missing -s compiler.cppstd=gnu20 -o *:with_capnproto=True -o *:with_cbor=True -o *:with_flatbuffers=True -o *:with_msgpack=True -o *:with_toml=True -o *:with_ubjson=True -o *:with_xml=True -o *:with_yaml=True      
      - name: Compile
        if: matrix.package-manager != 'conan'
        run: |
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            export CC=clang-${{ matrix.compiler-version }}
            export CXX=clang++-${{ matrix.compiler-version }}
          elif [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            export CC=gcc-${{ matrix.compiler-version }}
            export CXX=g++-${{ matrix.compiler-version }}
          fi
          $CXX --version
          if [[ "${{ matrix.format == 'JSON' }}" == "true" ]]; then
            cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=${{ matrix.cxx }} -DCMAKE_CXX_STANDARD=20 -DREFLECTCPP_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release
          else
            cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=${{ matrix.cxx }} -DCMAKE_CXX_STANDARD=20 -DREFLECTCPP_BUILD_TESTS=ON -DREFLECTCPP_JSON=OFF -DREFLECTCPP_${{ matrix.format }}=ON -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build build -j4
      - name: Run tests
        if: matrix.package-manager != 'conan'
        run: |
          ctest --test-dir build --output-on-failure
