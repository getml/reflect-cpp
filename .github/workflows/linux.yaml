name: linux

on: [ pull_request, workflow_dispatch ]

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - compiler: llvm
            compiler-version: 16
          - compiler: llvm
            compiler-version: 18
          - compiler: gcc
            compiler-version: 11
            additional-dep: "g++-11"
          - compiler: gcc
            compiler-version: 12
          - compiler: gcc
            compiler-version: 14
    name: "${{ github.job }} (${{ matrix.compiler }}-${{ matrix.compiler-version }})"
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: "${{ github.job }}-${{ matrix.compiler }}-${{ matrix.compiler-version }}"
          max-size: "2G"
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build ${{ matrix.additional-dep }}
      - name: Compile
        run: |
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            export CC=clang-${{ matrix.compiler-version }}
            export CXX=clang++-${{ matrix.compiler-version }}
          elif [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            export CC=gcc-${{ matrix.compiler-version }}
            export CXX=g++-${{ matrix.compiler-version }}
          fi
          sudo ln -s $(which ccache) /usr/local/bin/$CC
          sudo ln -s $(which ccache) /usr/local/bin/$CXX
          $CXX --version
          cmake -S . -B build -G Ninja -DREFLECTCPP_BUILD_TESTS=ON -DREFLECTCPP_BUILD_BENCHMARKS=ON -DREFLECTCPP_BSON=ON -DREFLECTCPP_CBOR=ON -DREFLECTCPP_FLEXBUFFERS=ON -DREFLECTCPP_MSGPACK=ON -DREFLECTCPP_TOML=ON -DREFLECTCPP_XML=ON -DREFLECTCPP_YAML=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build
      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure
      - name: Run benchmarks
        run: |
          echo '# Benchmarks' >> $GITHUB_STEP_SUMMARY 
          echo '## Benchmarks across different formats' >> $GITHUB_STEP_SUMMARY 
          echo '```' >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=canada_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=canada_write >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=licenses_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=licenses_write >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=person_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/all/reflect-cpp-all-format-benchmarks --benchmark_filter=person_write >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '## Benchmarks for JSON' >> $GITHUB_STEP_SUMMARY 
          echo '```' >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/json/reflect-cpp-json-benchmarks --benchmark_filter=person_read >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/json/reflect-cpp-json-benchmarks --benchmark_filter=canada >> $GITHUB_STEP_SUMMARY
          ./build/benchmarks/json/reflect-cpp-json-benchmarks --benchmark_filter=licenses >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
